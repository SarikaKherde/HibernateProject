-- Users table
CREATE TABLE Users (
    UserID INT PRIMARY KEY,
    Username VARCHAR(255) NOT NULL,
    Email VARCHAR(255) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Address TEXT,
    PhoneNumber VARCHAR(20),
    UserType ENUM('Customer', 'Admin') DEFAULT 'Customer',
    RegistrationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    -- Add other user-related fields as needed
);

-- Categories table
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(255) NOT NULL
    -- Add other category-related fields as needed
);

-- Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(255) NOT NULL,
    CategoryID INT,
    Price DECIMAL(10, 2) NOT NULL,
    StockQuantity INT NOT NULL,
    Description TEXT,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
    -- Add other product-related fields as needed
);

-- Reviews table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    UserID INT,
    ProductID INT,
    Rating INT NOT NULL,
    Comment TEXT,
    ReviewDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
    -- Add other review-related fields as needed
);

-- Orders table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    UserID INT,
    OrderDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    Status VARCHAR(50) NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Users(UserID)
    -- Add other order-related fields as needed
);

-- OrderItems table (to represent the items in each order)
CREATE TABLE OrderItems (
    OrderItemID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
    -- Add other order item-related fields as needed
);

-- Payments table
CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    Amount DECIMAL(10, 2) NOT NULL,
    PaymentDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PaymentMethod VARCHAR(50) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
    -- Add other payment-related fields as needed
);



Certainly! Let's delve into the relationships between the entities in an e-commerce project. I'll describe the relationships between the tables in terms of one-to-one, one-to-many, and many-to-one.

1. **Users table:**
   - One-to-Many with Orders: A user can place multiple orders, but each order is associated with only one user.
   - One-to-Many with Reviews: A user can write multiple reviews, but each review is associated with only one user.
  
2. **Categories table:**
   - One-to-Many with Products: A category can have multiple products, but each product is associated with only one category.

3. **Products table:**
   - Many-to-One with Categories: Many products can belong to one category.

4. **Reviews table:**
   - Many-to-One with Users: Many reviews can be written by one user.
   - Many-to-One with Products: Many reviews can be written for one product.

5. **Orders table:**
   - Many-to-One with Users: Many orders can be placed by one user.
   - One-to-Many with OrderItems: An order can have multiple order items, but each order item is associated with only one order.
   - One-to-One with Payments: Each order has one associated payment.

6. **OrderItems table:**
   - Many-to-One with Orders: Many order items can be part of one order.
   - Many-to-One with Products: Many order items can correspond to one product.

7. **Payments table:**
   - Many-to-One with Orders: Many payments can be associated with one order.

These relationships help maintain data integrity and reflect the connections between different entities in the e-commerce system. Please note that these relationships are based on typical scenarios, and the actual implementation might vary based on specific business requirements.